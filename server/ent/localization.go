// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/MrGeorge2/hejdusekj/ent/language"
	"github.com/MrGeorge2/hejdusekj/ent/localization"
)

// Localization is the model entity for the Localization schema.
type Localization struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LanguageID holds the value of the "language_id" field.
	LanguageID int `json:"language_id,omitempty"`
	// LocalizationValue holds the value of the "localizationValue" field.
	LocalizationValue string `json:"localizationValue,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocalizationQuery when eager-loading is set.
	Edges LocalizationEdges `json:"edges"`
}

// LocalizationEdges holds the relations/edges for other nodes in the graph.
type LocalizationEdges struct {
	// Language holds the value of the language edge.
	Language *Language `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocalizationEdges) LanguageOrErr() (*Language, error) {
	if e.loadedTypes[0] {
		if e.Language == nil {
			// The edge language was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: language.Label}
		}
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Localization) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case localization.FieldID, localization.FieldLanguageID:
			values[i] = new(sql.NullInt64)
		case localization.FieldLocalizationValue:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Localization", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Localization fields.
func (l *Localization) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localization.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case localization.FieldLanguageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field language_id", values[i])
			} else if value.Valid {
				l.LanguageID = int(value.Int64)
			}
		case localization.FieldLocalizationValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field localizationValue", values[i])
			} else if value.Valid {
				l.LocalizationValue = value.String
			}
		}
	}
	return nil
}

// QueryLanguage queries the "language" edge of the Localization entity.
func (l *Localization) QueryLanguage() *LanguageQuery {
	return (&LocalizationClient{config: l.config}).QueryLanguage(l)
}

// Update returns a builder for updating this Localization.
// Note that you need to call Localization.Unwrap() before calling this method if this Localization
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Localization) Update() *LocalizationUpdateOne {
	return (&LocalizationClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Localization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Localization) Unwrap() *Localization {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Localization is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Localization) String() string {
	var builder strings.Builder
	builder.WriteString("Localization(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", language_id=")
	builder.WriteString(fmt.Sprintf("%v", l.LanguageID))
	builder.WriteString(", localizationValue=")
	builder.WriteString(l.LocalizationValue)
	builder.WriteByte(')')
	return builder.String()
}

// Localizations is a parsable slice of Localization.
type Localizations []*Localization

func (l Localizations) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
