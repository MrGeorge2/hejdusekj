// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/MrGeorge2/hejdusekj/ent/migrate"

	"github.com/MrGeorge2/hejdusekj/ent/language"
	"github.com/MrGeorge2/hejdusekj/ent/localization"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// Localization is the client for interacting with the Localization builders.
	Localization *LocalizationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Language = NewLanguageClient(c.config)
	c.Localization = NewLocalizationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Language:     NewLanguageClient(cfg),
		Localization: NewLocalizationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Language:     NewLanguageClient(cfg),
		Localization: NewLocalizationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Language.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Language.Use(hooks...)
	c.Localization.Use(hooks...)
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Create returns a create builder for Language.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocalizations queries the localizations edge of a Language.
func (c *LanguageClient) QueryLocalizations(l *Language) *LocalizationQuery {
	query := &LocalizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(localization.Table, localization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, language.LocalizationsTable, language.LocalizationsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// LocalizationClient is a client for the Localization schema.
type LocalizationClient struct {
	config
}

// NewLocalizationClient returns a client for the Localization from the given config.
func NewLocalizationClient(c config) *LocalizationClient {
	return &LocalizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `localization.Hooks(f(g(h())))`.
func (c *LocalizationClient) Use(hooks ...Hook) {
	c.hooks.Localization = append(c.hooks.Localization, hooks...)
}

// Create returns a create builder for Localization.
func (c *LocalizationClient) Create() *LocalizationCreate {
	mutation := newLocalizationMutation(c.config, OpCreate)
	return &LocalizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Localization entities.
func (c *LocalizationClient) CreateBulk(builders ...*LocalizationCreate) *LocalizationCreateBulk {
	return &LocalizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Localization.
func (c *LocalizationClient) Update() *LocalizationUpdate {
	mutation := newLocalizationMutation(c.config, OpUpdate)
	return &LocalizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocalizationClient) UpdateOne(l *Localization) *LocalizationUpdateOne {
	mutation := newLocalizationMutation(c.config, OpUpdateOne, withLocalization(l))
	return &LocalizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocalizationClient) UpdateOneID(id int) *LocalizationUpdateOne {
	mutation := newLocalizationMutation(c.config, OpUpdateOne, withLocalizationID(id))
	return &LocalizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Localization.
func (c *LocalizationClient) Delete() *LocalizationDelete {
	mutation := newLocalizationMutation(c.config, OpDelete)
	return &LocalizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LocalizationClient) DeleteOne(l *Localization) *LocalizationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LocalizationClient) DeleteOneID(id int) *LocalizationDeleteOne {
	builder := c.Delete().Where(localization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocalizationDeleteOne{builder}
}

// Query returns a query builder for Localization.
func (c *LocalizationClient) Query() *LocalizationQuery {
	return &LocalizationQuery{
		config: c.config,
	}
}

// Get returns a Localization entity by its id.
func (c *LocalizationClient) Get(ctx context.Context, id int) (*Localization, error) {
	return c.Query().Where(localization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocalizationClient) GetX(ctx context.Context, id int) *Localization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLanguage queries the language edge of a Localization.
func (c *LocalizationClient) QueryLanguage(l *Localization) *LanguageQuery {
	query := &LanguageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(localization.Table, localization.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, localization.LanguageTable, localization.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocalizationClient) Hooks() []Hook {
	return c.hooks.Localization
}
