// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/MrGeorge2/hejdusekj/ent/language"
	"github.com/MrGeorge2/hejdusekj/ent/localization"
	"github.com/MrGeorge2/hejdusekj/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLanguage     = "Language"
	TypeLocalization = "Localization"
)

// LanguageMutation represents an operation that mutates the Language nodes in the graph.
type LanguageMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	languageCode         *string
	clearedFields        map[string]struct{}
	localizations        map[int]struct{}
	removedlocalizations map[int]struct{}
	clearedlocalizations bool
	done                 bool
	oldValue             func(context.Context) (*Language, error)
	predicates           []predicate.Language
}

var _ ent.Mutation = (*LanguageMutation)(nil)

// languageOption allows management of the mutation configuration using functional options.
type languageOption func(*LanguageMutation)

// newLanguageMutation creates new mutation for the Language entity.
func newLanguageMutation(c config, op Op, opts ...languageOption) *LanguageMutation {
	m := &LanguageMutation{
		config:        c,
		op:            op,
		typ:           TypeLanguage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLanguageID sets the ID field of the mutation.
func withLanguageID(id int) languageOption {
	return func(m *LanguageMutation) {
		var (
			err   error
			once  sync.Once
			value *Language
		)
		m.oldValue = func(ctx context.Context) (*Language, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Language.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLanguage sets the old Language of the mutation.
func withLanguage(node *Language) languageOption {
	return func(m *LanguageMutation) {
		m.oldValue = func(context.Context) (*Language, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LanguageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LanguageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LanguageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LanguageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Language.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLanguageCode sets the "languageCode" field.
func (m *LanguageMutation) SetLanguageCode(s string) {
	m.languageCode = &s
}

// LanguageCode returns the value of the "languageCode" field in the mutation.
func (m *LanguageMutation) LanguageCode() (r string, exists bool) {
	v := m.languageCode
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageCode returns the old "languageCode" field's value of the Language entity.
// If the Language object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LanguageMutation) OldLanguageCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageCode: %w", err)
	}
	return oldValue.LanguageCode, nil
}

// ResetLanguageCode resets all changes to the "languageCode" field.
func (m *LanguageMutation) ResetLanguageCode() {
	m.languageCode = nil
}

// AddLocalizationIDs adds the "localizations" edge to the Localization entity by ids.
func (m *LanguageMutation) AddLocalizationIDs(ids ...int) {
	if m.localizations == nil {
		m.localizations = make(map[int]struct{})
	}
	for i := range ids {
		m.localizations[ids[i]] = struct{}{}
	}
}

// ClearLocalizations clears the "localizations" edge to the Localization entity.
func (m *LanguageMutation) ClearLocalizations() {
	m.clearedlocalizations = true
}

// LocalizationsCleared reports if the "localizations" edge to the Localization entity was cleared.
func (m *LanguageMutation) LocalizationsCleared() bool {
	return m.clearedlocalizations
}

// RemoveLocalizationIDs removes the "localizations" edge to the Localization entity by IDs.
func (m *LanguageMutation) RemoveLocalizationIDs(ids ...int) {
	if m.removedlocalizations == nil {
		m.removedlocalizations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.localizations, ids[i])
		m.removedlocalizations[ids[i]] = struct{}{}
	}
}

// RemovedLocalizations returns the removed IDs of the "localizations" edge to the Localization entity.
func (m *LanguageMutation) RemovedLocalizationsIDs() (ids []int) {
	for id := range m.removedlocalizations {
		ids = append(ids, id)
	}
	return
}

// LocalizationsIDs returns the "localizations" edge IDs in the mutation.
func (m *LanguageMutation) LocalizationsIDs() (ids []int) {
	for id := range m.localizations {
		ids = append(ids, id)
	}
	return
}

// ResetLocalizations resets all changes to the "localizations" edge.
func (m *LanguageMutation) ResetLocalizations() {
	m.localizations = nil
	m.clearedlocalizations = false
	m.removedlocalizations = nil
}

// Where appends a list predicates to the LanguageMutation builder.
func (m *LanguageMutation) Where(ps ...predicate.Language) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LanguageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Language).
func (m *LanguageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LanguageMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.languageCode != nil {
		fields = append(fields, language.FieldLanguageCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LanguageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case language.FieldLanguageCode:
		return m.LanguageCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LanguageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case language.FieldLanguageCode:
		return m.OldLanguageCode(ctx)
	}
	return nil, fmt.Errorf("unknown Language field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case language.FieldLanguageCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageCode(v)
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LanguageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LanguageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LanguageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Language numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LanguageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LanguageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LanguageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Language nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LanguageMutation) ResetField(name string) error {
	switch name {
	case language.FieldLanguageCode:
		m.ResetLanguageCode()
		return nil
	}
	return fmt.Errorf("unknown Language field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LanguageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.localizations != nil {
		edges = append(edges, language.EdgeLocalizations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LanguageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeLocalizations:
		ids := make([]ent.Value, 0, len(m.localizations))
		for id := range m.localizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LanguageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlocalizations != nil {
		edges = append(edges, language.EdgeLocalizations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LanguageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case language.EdgeLocalizations:
		ids := make([]ent.Value, 0, len(m.removedlocalizations))
		for id := range m.removedlocalizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LanguageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlocalizations {
		edges = append(edges, language.EdgeLocalizations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LanguageMutation) EdgeCleared(name string) bool {
	switch name {
	case language.EdgeLocalizations:
		return m.clearedlocalizations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LanguageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Language unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LanguageMutation) ResetEdge(name string) error {
	switch name {
	case language.EdgeLocalizations:
		m.ResetLocalizations()
		return nil
	}
	return fmt.Errorf("unknown Language edge %s", name)
}

// LocalizationMutation represents an operation that mutates the Localization nodes in the graph.
type LocalizationMutation struct {
	config
	op                Op
	typ               string
	id                *int
	localizationValue *string
	clearedFields     map[string]struct{}
	language          *int
	clearedlanguage   bool
	done              bool
	oldValue          func(context.Context) (*Localization, error)
	predicates        []predicate.Localization
}

var _ ent.Mutation = (*LocalizationMutation)(nil)

// localizationOption allows management of the mutation configuration using functional options.
type localizationOption func(*LocalizationMutation)

// newLocalizationMutation creates new mutation for the Localization entity.
func newLocalizationMutation(c config, op Op, opts ...localizationOption) *LocalizationMutation {
	m := &LocalizationMutation{
		config:        c,
		op:            op,
		typ:           TypeLocalization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLocalizationID sets the ID field of the mutation.
func withLocalizationID(id int) localizationOption {
	return func(m *LocalizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Localization
		)
		m.oldValue = func(ctx context.Context) (*Localization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Localization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLocalization sets the old Localization of the mutation.
func withLocalization(node *Localization) localizationOption {
	return func(m *LocalizationMutation) {
		m.oldValue = func(context.Context) (*Localization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LocalizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LocalizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LocalizationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LocalizationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Localization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLanguageID sets the "language_id" field.
func (m *LocalizationMutation) SetLanguageID(i int) {
	m.language = &i
}

// LanguageID returns the value of the "language_id" field in the mutation.
func (m *LocalizationMutation) LanguageID() (r int, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageID returns the old "language_id" field's value of the Localization entity.
// If the Localization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalizationMutation) OldLanguageID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageID: %w", err)
	}
	return oldValue.LanguageID, nil
}

// ResetLanguageID resets all changes to the "language_id" field.
func (m *LocalizationMutation) ResetLanguageID() {
	m.language = nil
}

// SetLocalizationValue sets the "localizationValue" field.
func (m *LocalizationMutation) SetLocalizationValue(s string) {
	m.localizationValue = &s
}

// LocalizationValue returns the value of the "localizationValue" field in the mutation.
func (m *LocalizationMutation) LocalizationValue() (r string, exists bool) {
	v := m.localizationValue
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalizationValue returns the old "localizationValue" field's value of the Localization entity.
// If the Localization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LocalizationMutation) OldLocalizationValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalizationValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalizationValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalizationValue: %w", err)
	}
	return oldValue.LocalizationValue, nil
}

// ResetLocalizationValue resets all changes to the "localizationValue" field.
func (m *LocalizationMutation) ResetLocalizationValue() {
	m.localizationValue = nil
}

// ClearLanguage clears the "language" edge to the Language entity.
func (m *LocalizationMutation) ClearLanguage() {
	m.clearedlanguage = true
}

// LanguageCleared reports if the "language" edge to the Language entity was cleared.
func (m *LocalizationMutation) LanguageCleared() bool {
	return m.clearedlanguage
}

// LanguageIDs returns the "language" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LanguageID instead. It exists only for internal usage by the builders.
func (m *LocalizationMutation) LanguageIDs() (ids []int) {
	if id := m.language; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLanguage resets all changes to the "language" edge.
func (m *LocalizationMutation) ResetLanguage() {
	m.language = nil
	m.clearedlanguage = false
}

// Where appends a list predicates to the LocalizationMutation builder.
func (m *LocalizationMutation) Where(ps ...predicate.Localization) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LocalizationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Localization).
func (m *LocalizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LocalizationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.language != nil {
		fields = append(fields, localization.FieldLanguageID)
	}
	if m.localizationValue != nil {
		fields = append(fields, localization.FieldLocalizationValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LocalizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case localization.FieldLanguageID:
		return m.LanguageID()
	case localization.FieldLocalizationValue:
		return m.LocalizationValue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LocalizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case localization.FieldLanguageID:
		return m.OldLanguageID(ctx)
	case localization.FieldLocalizationValue:
		return m.OldLocalizationValue(ctx)
	}
	return nil, fmt.Errorf("unknown Localization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case localization.FieldLanguageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageID(v)
		return nil
	case localization.FieldLocalizationValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalizationValue(v)
		return nil
	}
	return fmt.Errorf("unknown Localization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LocalizationMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LocalizationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LocalizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Localization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LocalizationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LocalizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LocalizationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Localization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LocalizationMutation) ResetField(name string) error {
	switch name {
	case localization.FieldLanguageID:
		m.ResetLanguageID()
		return nil
	case localization.FieldLocalizationValue:
		m.ResetLocalizationValue()
		return nil
	}
	return fmt.Errorf("unknown Localization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LocalizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.language != nil {
		edges = append(edges, localization.EdgeLanguage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LocalizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case localization.EdgeLanguage:
		if id := m.language; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LocalizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LocalizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LocalizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlanguage {
		edges = append(edges, localization.EdgeLanguage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LocalizationMutation) EdgeCleared(name string) bool {
	switch name {
	case localization.EdgeLanguage:
		return m.clearedlanguage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LocalizationMutation) ClearEdge(name string) error {
	switch name {
	case localization.EdgeLanguage:
		m.ClearLanguage()
		return nil
	}
	return fmt.Errorf("unknown Localization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LocalizationMutation) ResetEdge(name string) error {
	switch name {
	case localization.EdgeLanguage:
		m.ResetLanguage()
		return nil
	}
	return fmt.Errorf("unknown Localization edge %s", name)
}
